# syntax=docker/dockerfile:1.4
# artifacts: true
# platforms: linux/amd64,linux/arm64/v8
# platforms_pr: linux/amd64
# no-cache-filters: sunshine-base,artifacts,sunshine
ARG BASE=fedora
ARG TAG=39
FROM ${BASE}:${TAG} AS sunshine-base

FROM sunshine-base as sunshine-build

ARG TARGETPLATFORM
RUN echo "target_platform: ${TARGETPLATFORM}"

ARG BRANCH
ARG BUILD_VERSION
ARG COMMIT
# note: BUILD_VERSION may be blank

ENV BRANCH=${BRANCH}
ENV BUILD_VERSION=${BUILD_VERSION}
ENV COMMIT=${COMMIT}

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN dnf -y update
RUN dnf -y group install "Development Tools"
RUN dnf -y install \
  boost-devel-1.81.0* \
  cmake-3.27.* \
  doxygen \
  gcc-13.2.* \
  gcc-c++-13.2.* \
  git \
  graphviz \
  libappindicator-gtk3-devel \
  libcap-devel \
  libcurl-devel \
  libdrm-devel \
  libevdev-devel \
  libnotify-devel \
  libva-devel \
  libvdpau-devel \
  libX11-devel \
  libxcb-devel \
  libXcursor-devel \
  libXfixes-devel \
  libXi-devel \
  libXinerama-devel \
  libXrandr-devel \
  libXtst-devel \
  mesa-libGL-devel \
  miniupnpc-devel \
  nodejs \
  numactl-devel \
  openssl-devel \
  opus-devel \
  pulseaudio-libs-devel \
  python3.11 \
  rpm-build \
  wget \
  which \
  intel-mediasdk-devel \
  xorg-x11-server-Xvfb

RUN dnf clean all
RUN rm -rf /var/cache/yum

# install cuda
WORKDIR /build/cuda
# versions: https://developer.nvidia.com/cuda-toolkit-archive
ENV CUDA_VERSION="12.4.0"
ENV CUDA_BUILD="550.54.14"
ENV cuda_prefix="https://developer.download.nvidia.com/compute/cuda/"
ENV cuda_suffix=""
ENV url="${cuda_prefix}${CUDA_VERSION}/local_installers/cuda_${CUDA_VERSION}_${CUDA_BUILD}_linux${cuda_suffix}.run"
RUN wget "$url" --progress=bar:force:noscroll -q --show-progress -O ./cuda.run
RUN chmod a+x ./cuda.run
RUN ./cuda.run --silent --toolkit --toolkitpath=/build/cuda --no-opengl-libs --no-man-page --no-drm
RUN rm ./cuda.run

# copy repository
WORKDIR /build/sunshine/
COPY ./worker/sunshine .

# setup build directory
WORKDIR /build/sunshine/build

RUN cmake \
  -DCMAKE_CUDA_COMPILER:PATH=/build/cuda/bin/nvcc \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DSUNSHINE_ASSETS_DIR=share/sunshine \
  -DSUNSHINE_EXECUTABLE_PATH=/usr/bin/sunshine \
  -DSUNSHINE_ENABLE_WAYLAND=ON \
  -DSUNSHINE_ENABLE_X11=ON \
  -DSUNSHINE_ENABLE_DRM=ON \
  -DSUNSHINE_ENABLE_CUDA=ON \
  /build/sunshine
RUN make -j "$(nproc)"
RUN cpack -G DEB

RUN ls /build/sunshine/build

FROM golang as webrtc-base
RUN apt-get update -y
RUN apt install -y libevdev-dev libx11-dev
WORKDIR /src
COPY ./worker/webrtc/go.mod .
COPY ./worker/webrtc/go.sum .

RUN go mod download

COPY ./worker/webrtc .
RUN go build -o hub ./cmd

FROM golang as daemon-base
WORKDIR /src
COPY ./worker/daemon/go.mod .
COPY ./worker/daemon/go.sum .

RUN go mod download

COPY ./worker/daemon .
RUN go build -o daemon ./service/linux

FROM sunshine-base as final

WORKDIR /final
COPY --from=webrtc-base /src/hub /final/hub
COPY --from=daemon-base /src/daemon /final/daemon
COPY --from=sunshine-build /build/sunshine/build/sunshine /final/shmsunshine
COPY --from=sunshine-build /build/sunshine/build/libparent.so /final/libparent.so
COPY --from=sunshine-build /build/sunshine/src_assets/linux/assets/shaders/opengl /final/opengl


WORKDIR /copy
CMD rm -rf binary && mv /final  ./binary && chmod 777 -R binary